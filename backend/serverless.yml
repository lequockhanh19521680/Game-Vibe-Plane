service: game-vibe-plane-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}

  environment:
    SCORES_TABLE: ${self:service}-scores-${self:provider.stage}
    COUNTRIES_TABLE: ${self:service}-countries-${self:provider.stage}
    WEBSOCKET_TABLE: ${self:service}-websocket-${self:provider.stage}
    STAGE: ${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.SCORES_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.SCORES_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.COUNTRIES_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.COUNTRIES_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.WEBSOCKET_TABLE}"
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - "arn:aws:execute-api:${aws:region}:${aws:accountId}:*"

functions:
  # REST API Functions
  submitScore:
    handler: src/handlers/submitScore.handler
    events:
      - http:
          path: /submit-score
          method: post
          cors: true

  getLeaderboard:
    handler: src/handlers/getLeaderboard.handler
    events:
      - http:
          path: /leaderboard
          method: get
          cors: true

  getCountryLeaderboard:
    handler: src/handlers/getCountryLeaderboard.handler
    events:
      - http:
          path: /leaderboard/country
          method: get
          cors: true

  healthCheck:
    handler: src/handlers/healthCheck.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # WebSocket Functions
  websocketConnect:
    handler: src/handlers/websocket.connectHandler
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/handlers/websocket.disconnectHandler
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: src/handlers/websocket.defaultHandler
    events:
      - websocket:
          route: $default

  # Real-time update function triggered by DynamoDB streams
  processScoreUpdate:
    handler: src/handlers/processScoreUpdate.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ScoresTable, StreamArn]

resources:
  Resources:
    # Scores Table
    ScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SCORES_TABLE}
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: score
            AttributeType: N
          - AttributeName: country
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ScoreIndex
            KeySchema:
              - AttributeName: score
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: CountryIndex
            KeySchema:
              - AttributeName: country
                KeyType: HASH
              - AttributeName: score
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # Countries Leaderboard Table
    CountriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COUNTRIES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: country
            AttributeType: S
          - AttributeName: totalScore
            AttributeType: N
        KeySchema:
          - AttributeName: country
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TotalScoreIndex
            KeySchema:
              - AttributeName: totalScore
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # WebSocket Connections Table
    WebSocketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.WEBSOCKET_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  serverless-offline:
    httpPort: 3000
    websocketPort: 3001
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
